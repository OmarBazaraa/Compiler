%{
// ==================
// Definition Section
// ==================

/**
 * This is the Definition section of the Lexer Specification file.
 *
 * Lex copies the material between "%{" and "%}"
 * directly to the generated C file,
 * so you may write any valid C code here. 
 */

// Include tokens definition generated by Yacc
#include "parser.h"

extern int yylval;

// =====================================================================================================
%}

%{
// ============
// Start States
// ============

/**
 * You enter a new state with a BEGIN statement.
 * For instance, to change to the FNAME state we used the statement "BEGIN FNAME;".
 * To change back to the default state, we use "BEGIN 0".
 * (The default, state zero, is also known as INITIAL.)
 */
%}

%s FNAME

%{
// =====================================================================================================
%}

%{
// ===================================
// Pattern Definitions (Substitutions)
// ===================================
%}

WHITESPACE          [ \t\n]+

%{
// =====================================================================================================
%}

%%

%{
// =============
// Rules Section
// =============

// NOTE: comments in rules section must begin with whitespace,
// unless it is in a literal block like this one.

/**
 * Each rule is made up of two parts: a pattern and an action, separated by whitespace.
 * The lexer that lex generates will execute the action when it recognizes the pattern.
 */
%}

[0-9]+                              { yylval = atoi(yytext); return NUMBER; }
[ \t]                               ; // Ignore whitespace
\n                                  return 0;
.                                   return yytext[0];

%{
// =====================================================================================================
%}

%%

// ========================
// User Subroutines Section
// ========================

int running = 1;

// int main() {
//     while (running) {
//         yylex();
//     }
// 
//     return 0;
// }

int yywrap() {
    running = 0;
    return 1;
}